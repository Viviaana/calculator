{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","sum","onClick","button","calculate","clearBtn","setState","eval","e","className","this","name","target","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.44ec78ec.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\n\nclass App extends Component {\nstate = {\n  sum: \"\"\n}\n\n\nonClick = button =>{\n  if (button === \"=\"){\n    this.calculate()\n  }\n  else if (button === \"clear\"){\n    this.clearBtn()\n  }\n  else{\n    this.setState({\n      sum: this.state.sum + button\n    })\n  }\n};\n\nclearBtn = () =>{\n  this.setState({\n    sum: \"\"\n  });\n}\n\ncalculate = () =>{\n  try {\n    this.setState({\n      sum: (eval(this.state.sum))\n    })\n} catch (e) {\n    this.setState({\n      sum: \"error\"\n    })\n  }\n};\n\n\n\nrender(){\n  return (\n    <div className=\"App\">\n\n      <div className = \"calcGrid\">\n        <div className = \"box answerBox\"><p>{this.state.sum}</p></div>\n        <div className = \"box clearBox\"><button name = \"clear\" onClick={this.clearBtn}>Clear</button></div>\n        <div className = \"box divideBox\"><button name = \"/\">/</button></div>\n        <div className = \"box num7\"><button name = \"7\" onClick={e => this.onClick(e.target.name)}>7</button></div>\n        <div className = \"box num8\"><button name = \"8\" onClick={e => this.onClick(e.target.name)}>8</button></div>\n        <div className = \"box num9\"><button name = \"9\" onClick={e => this.onClick(e.target.name)}>9</button></div>\n        <div className = \"box timesBox\"><button name = \"*\" onClick={e => this.onClick(e.target.name)}>*</button></div>\n        <div className = \"box num4\"><button name = \"4\" onClick={e => this.onClick(e.target.name)}>4</button></div>\n        <div className = \"box num5\"><button name = \"5\" onClick={e => this.onClick(e.target.name)}>5</button></div>\n        <div className = \"box num6\"><button name = \"6\" onClick={e => this.onClick(e.target.name)}>6</button></div>\n        <div className = \"box minusBox\"><button name = \"-\" onClick={e => this.onClick(e.target.name)}>-</button></div>\n        <div className = \"box num1\"><button name = \"1\" onClick={e => this.onClick(e.target.name)}>1</button></div>\n        <div className = \"box num2\"><button name = \"2\" onClick={e => this.onClick(e.target.name)}>2</button></div>\n        <div className = \"box num3\"><button name = \"3\" onClick={e => this.onClick(e.target.name)}>3</button></div>\n        <div className = \"box plusBox\"><button name = \"+\" onClick={e => this.onClick(e.target.name)}>+</button></div>\n        <div className = \"box num0\"><button name = \"0\" onClick={e => this.onClick(e.target.name)}>0</button></div>\n        <div className = \"box numdecimal\"><button name = \".\" onClick={e => this.onClick(e.target.name)}>.</button></div>\n        <div className = \"box equalsBox\"><button name = \"=\" onClick={e => this.onClick(e.target.name)}>=</button></div>\n      </div>\n\n    </div>\n  );\n}\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}